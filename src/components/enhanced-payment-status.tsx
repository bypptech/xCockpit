import React, { useEffect, useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Button } from '@/components/ui/button';\nimport { \n  CheckCircle, \n  Clock, \n  AlertCircle, \n  ExternalLink, \n  RefreshCw,\n  Shield,\n  Zap\n} from 'lucide-react';\n\ntype PaymentStatus = 'pending' | 'confirming' | 'confirmed' | 'failed' | 'expired';\n\ninterface PaymentStatusData {\n  txHash: string;\n  status: PaymentStatus;\n  confirmations: number;\n  targetConfirmations: number;\n  amount: string;\n  currency: string;\n  orderId: string;\n  timestamp: string;\n  blockNumber?: number;\n  error?: string;\n  estimatedCompleteTime?: string;\n}\n\ninterface EnhancedPaymentStatusProps {\n  paymentData: PaymentStatusData;\n  onRefresh?: () => void;\n  onCancel?: () => void;\n  networkName?: string;\n  explorerUrl?: string;\n  refreshing?: boolean;\n}\n\nexport function EnhancedPaymentStatus({\n  paymentData,\n  onRefresh,\n  onCancel,\n  networkName = 'Base',\n  explorerUrl = 'https://basescan.org',\n  refreshing = false\n}: EnhancedPaymentStatusProps) {\n  const [elapsedTime, setElapsedTime] = useState(0);\n  \n  useEffect(() => {\n    const startTime = new Date(paymentData.timestamp).getTime();\n    const interval = setInterval(() => {\n      setElapsedTime(Math.floor((Date.now() - startTime) / 1000));\n    }, 1000);\n    \n    return () => clearInterval(interval);\n  }, [paymentData.timestamp]);\n  \n  const getStatusIcon = (status: PaymentStatus) => {\n    switch (status) {\n      case 'pending':\n        return <Clock className=\"h-5 w-5 text-yellow-500 animate-pulse\" />;\n      case 'confirming':\n        return <RefreshCw className=\"h-5 w-5 text-blue-500 animate-spin\" />;\n      case 'confirmed':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'failed':\n        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'expired':\n        return <AlertCircle className=\"h-5 w-5 text-orange-500\" />;\n      default:\n        return <Clock className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n  \n  const getStatusText = (status: PaymentStatus) => {\n    switch (status) {\n      case 'pending':\n        return '支払い処理中';\n      case 'confirming':\n        return 'ブロック確認中';\n      case 'confirmed':\n        return '支払い完了';\n      case 'failed':\n        return '支払い失敗';\n      case 'expired':\n        return '支払い期限切れ';\n      default:\n        return '不明な状態';\n    }\n  };\n  \n  const getStatusColor = (status: PaymentStatus) => {\n    switch (status) {\n      case 'pending':\n        return 'secondary';\n      case 'confirming':\n        return 'default';\n      case 'confirmed':\n        return 'default';\n      case 'failed':\n        return 'destructive';\n      case 'expired':\n        return 'secondary';\n      default:\n        return 'secondary';\n    }\n  };\n  \n  const progressPercentage = Math.min(\n    (paymentData.confirmations / Math.max(paymentData.targetConfirmations, 1)) * 100,\n    100\n  );\n  \n  const formatTime = (seconds: number): string => {\n    if (seconds < 60) return `${seconds}秒`;\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}分${remainingSeconds}秒`;\n  };\n  \n  const formatTxHash = (hash: string): string => {\n    return `${hash.slice(0, 6)}...${hash.slice(-4)}`;\n  };\n  \n  return (\n    <Card className=\"w-full max-w-2xl\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {getStatusIcon(paymentData.status)}\n            {getStatusText(paymentData.status)}\n          </div>\n          <Badge variant={getStatusColor(paymentData.status)}>\n            {paymentData.status.toUpperCase()}\n          </Badge>\n        </CardTitle>\n        <CardDescription>\n          Order ID: {paymentData.orderId}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Transaction Info */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium\">取引ハッシュ</span>\n            <div className=\"flex items-center gap-2\">\n              <code className=\"text-sm bg-muted px-2 py-1 rounded\">\n                {formatTxHash(paymentData.txHash)}\n              </code>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-8 w-8 p-0\"\n                onClick={() => window.open(`${explorerUrl}/tx/${paymentData.txHash}`, '_blank')}\n              >\n                <ExternalLink className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium\">支払い金額</span>\n            <span className=\"font-mono font-bold\">\n              ${paymentData.amount} {paymentData.currency}\n            </span>\n          </div>\n          \n          {paymentData.blockNumber && (\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">ブロック番号</span>\n              <span className=\"font-mono\">{paymentData.blockNumber.toLocaleString()}</span>\n            </div>\n          )}\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium\">経過時間</span>\n            <span className=\"font-mono\">{formatTime(elapsedTime)}</span>\n          </div>\n        </div>\n        \n        {/* Confirmation Progress */}\n        {paymentData.status === 'confirming' && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Shield className=\"h-4 w-4 text-blue-500\" />\n                <span className=\"text-sm font-medium\">ブロック確認</span>\n              </div>\n              <span className=\"text-sm text-muted-foreground\">\n                {paymentData.confirmations} / {paymentData.targetConfirmations}\n              </span>\n            </div>\n            \n            <Progress value={progressPercentage} className=\"h-2\" />\n            \n            <div className=\"text-xs text-muted-foreground text-center\">\n              {paymentData.estimatedCompleteTime && (\n                <span>完了予定: {paymentData.estimatedCompleteTime}</span>\n              )}\n            </div>\n          </div>\n        )}\n        \n        {/* Error Message */}\n        {paymentData.error && (\n          <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"h-4 w-4 text-red-500\" />\n              <span className=\"text-sm font-medium text-red-800\">エラー詳細</span>\n            </div>\n            <p className=\"text-sm text-red-600 mt-1\">{paymentData.error}</p>\n          </div>\n        )}\n        \n        {/* Status-specific content */}\n        {paymentData.status === 'pending' && (\n          <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <Zap className=\"h-4 w-4 text-yellow-600\" />\n              <span className=\"text-sm font-medium text-yellow-800\">処理中</span>\n            </div>\n            <p className=\"text-sm text-yellow-600 mt-1\">\n              トランザクションが{networkName}ネットワークで処理されています。\n              通常数秒で完了します。\n            </p>\n          </div>\n        )}\n        \n        {paymentData.status === 'confirmed' && (\n          <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span className=\"text-sm font-medium text-green-800\">支払い完了</span>\n            </div>\n            <p className=\"text-sm text-green-600 mt-1\">\n              支払いが正常に完了しました。デバイス操作が可能になりました。\n            </p>\n          </div>\n        )}\n        \n        {/* Action Buttons */}\n        <div className=\"flex gap-2 pt-4 border-t\">\n          {onRefresh && (paymentData.status === 'pending' || paymentData.status === 'confirming') && (\n            <Button \n              variant=\"outline\" \n              onClick={onRefresh}\n              disabled={refreshing}\n              className=\"flex-1\"\n            >\n              {refreshing ? (\n                <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n              ) : (\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n              )}\n              状態更新\n            </Button>\n          )}\n          \n          {onCancel && (paymentData.status === 'pending' || paymentData.status === 'failed') && (\n            <Button \n              variant=\"outline\" \n              onClick={onCancel}\n              className=\"flex-1\"\n            >\n              キャンセル\n            </Button>\n          )}\n          \n          <Button\n            variant=\"outline\"\n            onClick={() => window.open(`${explorerUrl}/tx/${paymentData.txHash}`, '_blank')}\n            className=\"flex-1\"\n          >\n            <ExternalLink className=\"h-4 w-4 mr-2\" />\n            Explorer で確認\n          </Button>\n        </div>\n        \n        {/* Network Info */}\n        <div className=\"text-xs text-muted-foreground text-center pt-2 border-t\">\n          Network: {networkName} • \n          Timestamp: {new Date(paymentData.timestamp).toLocaleString('ja-JP')}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}